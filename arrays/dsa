// var twoSum = function(nums, target) {
//     const map = new Map()
//     for(let i = 0; i<nums.length; i++){
//         let res = target - nums[i];
//         if(map.has(res)){
//             return [ res,nums[i]]
//         }
//         map.set(nums[i], true)
        
//     }
//     return []
// };
// console.log(twoSum([1,4,2,6,7,2], 9))

// function groupAnag(strs){
//     const map = new Map();
//     for(let str of strs){
//         let count = new Array(26).fill(0)
//         for(let char of str){
//             count[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;

//         }
//         const key = count.join('#');
//         if(!map.has(key)){
//             map.set(key, [])
//         }
//         map.get(key).push(str)
//     }
//     return Array.from(map.values())
// }

// console.log(groupAnag(["eat","tea","tan","ate","nat","bat"]))

// function isAnag(s, t){
//     const map = new Map();
//     let count = {}
//     for(let char of s){
//         count[char] = (count[char] || 0) + 1;
//     }
//     for(let char of t){
//         if(!count[char]) return false
//         count[char]--;
//     }
//     return true
// }
// console.log(isAnag('listen', 'silent'))

// function kTopElem (nums,k){
//     const freq = new Map();
//     for(let num of nums){
//         freq.set(num, (freq.get(num) || 0) + 1)
//     }
//     const fArr = Array.from(freq.entries()).sort((a,b) => b[1]-a[1]);
//     const res = []
//     for(let i = 0; i<k; i++){
//         res.push(fArr[i][0])
//     }
//     return res
// }
// console.log(kTopElem([1,1,1,2,2,3,6,6,6,66,6,4,5,6,1,2], 1))

// function selfProduct(nums){
//     let n =  nums.length;
//     let pre = 1;
//     let suf = 1;
//     let res = new Array(n).fill(1);

//     for(let i = 0; i<n; i++){
//         res[i] = pre;
//         pre *= nums[i]
//     }

//     for(let j = n-1; j>=0; j--){
//         res[j] *= suf;
//         suf *= nums[j]
//     }
//     return res
// }

// console.log(selfProduct([1,2,3,4]))

// function continousArray(nums) {
//     if (nums.length === 0) return 0
//     let set = new Set(nums);
//     let streak = 0;
//     let res = []
//     for (let n of nums) {
//         if (!set.has(n - 1)) {
//             let curr = n;
//             let currStreak = 1
//             while (set.has(curr + 1)) {
//                 curr += 1;
//                 if(!res.includes(curr-1)){
//                     res.push(curr-1)
//                 }
//                 res.push(curr)
//                 currStreak += 1

//             }
//             streak = Math.max(streak, currStreak)
//         }

//     }
//     return res
// }
// console.log(continousArray([100,4,200,1,3,2]))

// function contSubStr(s){
//     let set = new Set();
//     let r = 0, l =0, maxLen = 0, start = 0;
//     for(r ; r<s.length; r++){
//         while(set.has(s[r])){
//             set.delete(s[l])
//             l++
//         }
//         set.add(s[r])
//         if(r-l+1>maxLen){
//             maxLen = r-l+1;
//             start = l
//         }
//     }
//     return s.slice(start, start+maxLen)
// }
// console.log(contSubStr("pwwkew"))

// function removeDup(nums){
//     return [... new Set(nums)]
// }
// console.log(removeDup([1,1,3,5,6,7,1,2,3,4,5,6]))